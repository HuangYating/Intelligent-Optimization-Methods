/*
问题描述:
假设有一个旅行商人要拜访全国31个省会城市，他需要选择所要走的路径使得路径要短，每个城市只能拜访一次，而且最后要回到原来出发的城市。
全国31个省会城市的坐标（每两个相邻值构成一个城市的坐标值）为
{1304, 2312,3639 ,1315, 4177 ,2244,3712, 1399, 3488, 1535, 3326, 1556,
3238, 1229, 4196, 1004, 4312, 790, 4386, 570, 3007, 1970, 2562, 1756, 
2788, 1491, 2381, 1676, 1332,695, 3715, 1678, 3918, 2179, 4061 ,2370,
3780 ,2212, 3676, 2578, 4029, 2838, 4263, 2931, 3429, 1908, 3507, 2367, 
3394 ,2643, 3439 ,3201, 2935, 3240, 3140, 3550, 2545, 2357, 2778, 2826, 2370 ,2975};
*/

/*算法tabuSearch实现说明*/ 

/* 
//编码方式（解的形式）：31城市用unsigned 0到30表示，一条路径用一个vector<unsigned>存储 
//适值函数：目标函数为根据路径计算的距离和，这里采用目标函数作为适值函数  
//初始解：这里选择了按顺序从编号为0走到编号为30的城市的路径为初始解 （没有尝试采用利用其他启发式算法得到初始解 ） 
//移动与邻域移动 ：每次移动为交换2个城市的编号顺序；由此产生的所有移动构成邻域 
//禁忌表：这里选择了适值函数作为禁忌对象；长度设定为22；禁忌表用vector<double>存储禁忌对象  
//特赦准则： 1，如果某个候选解优于历史最优解，可被解禁；2若是所有候选解都被禁忌，则选择候选集里的最优解解禁  
//选择策略：每次选择，首先，采用特赦准则1；其次，选择未被禁的最优解（也就是适值函数最小的候选解）；最后采用特赦准则2  
//终止准则： 这里采用最大迭代次数来决定是否终止算法，最大迭代次数设为1000 

*/ 
